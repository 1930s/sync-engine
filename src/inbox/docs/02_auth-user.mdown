Title: Obtaining a User Access Token

*Note: this section refers to the hosted version of Inbox. Development environments can authenticate accounts through the command line tools. See the `README` for details.*

Before you can request an access token for a user, your client application must be registered in order to receive an `app_token` and `app_secret`.

This authentication flow is often referred to as *3-legged OAuth2*. We recommend using an [existing client library](http://oauth.net/2/) to connect. 


# 1. Redirect user to login page

Within your application, direct the user to `https://www.inboxapp.com/oauth/authorize`. Note, this URL is different than other API requests. Your redirect should include the following URL-encoded parameters:
    
* `login_hint` -- the user's email address
* `client_id` -- your application's token [insert here]
* `redirect_uri`
* `response_type` -- either `code` for explicit authentication, or `token` for implicit
* `state` -- an optional unique identifier to protect against CSRF. This will be passed as a paremeter to your `redirect_uri`.

Depending on the user's email provider, Inbox will either direct them to Gmail's OAuth page or request their email account credentials directly.

    [[ Screenshot here, both Gmail and Exchange]]

## Callback URIs

Inbox does not support plain HTTP -- your callback URI must be secured with HTTPS. Any request to `http://api.inboxapp.com` will fail.

For development environments, we recommend proxying HTTPS traffic to your application with [stunnel](https://www.stunnel.org/index.html). See [this gist](https://gist.github.com/grinich/5328c94995cecf57c16f) for a script to quickly get started. By default, Inbox does not attempt to verify the certificate chains, so self-signed certificates are fine.

Inbox also supports app-registered URLs as the `callback_uri` parameter for platforms such as iOS. (e.g. `myapp://oauth_callback`).



# 2. Receive callback Inbox

## Explicit auth (server-side applications)

Once the user has provided their account credentials, Inbox will redirect to the `redirect_uri` previously specified, with a URL parameter `code`. If you provided the `state` parameter, it will also be included.


Your application should exchange `code` for an `access_token` by making the following request 

    POST https://api.inboxapp.com/a/token
    
  including the body
  
  * `grant_type` as the string `authorization_code`
  * `code` is the value returned in step 2
  * `redirect_uri` same as previously used
  * `client_id` as your application's token
  * `client_secret` as your application's secret

If `client_id` and `client_secret` are valid, server will invoke a callback on `redirect_url` that contains an `access_token` in the form:

```
:::json
{
    "access_token": "...",
    "refresh_token": "...",
    "token_type": "bearer",
    "expire_in": 7200,
    "scope": "..."
}   
```

Store these values. You may now use the `access_token` to initiate Inbox API requests for the authenticated user.


## Implicit auth (client-side applications)

If you provided `token` as the `response_type` in step 1, this redirect will include the `access_token` as a URL fragrment. You can simply grab this token and start making API requests. If provided, the `state` parameter will also be included.

Note that this method should only be used in situations where you cannot distribute your `client_secret`, such as in a native desktop or mobile app.


## No refresh tokens

Several OAuth providers use refresh tokens with periodically expiring access tokens. This is purportedly done to provide additional security, but in fact just adds complexity to the authentication protocol. (Both are exposed on the same channel and, for nearly all developers, stored in the same database.)

Inbox alleviates this burden by only providing a single `access_token`. You should consider it a client-specific password that is valid unless explicitly revoked.


# Revoking an access token

Access tokens can be quickly revoked by sending a request to:

    POST https://api.inboxapp.com/oauth/revoke

A 200 response with an empty body confirms the revocation. Future API calls for this user will require you to reinitiate the OAuth flow and receive a new `access_token`.


