#!/usr/bin/env python
import click
import redis

from boto import ec2

from inbox.scheduling.queue import QueueClient


def get_zone_for_instance(hostname):
    conn = ec2.connect_to_region('us-west-2')

    instances = []
    for r in conn.get_all_instances():
        for i in r.instances:
            instances.append(i)

    instances = [i for i in instances if i.tags.get('Name') == hostname and
                 i.tags.get('Role') == 'sync']

    if not instances:
        raise Exception("No sync host with hostname '{}'".format(hostname))

    assert len(instances) == 1

    return instances[0].placement

print "before main"


@click.command()
@click.option('--previous-host-name', type=str,
              help="previous sync host zone")
@click.argument('hostname')
@click.argument('process-num')
@click.argument('account-id')
def main(previous_host_name, hostname, process_num, account_id):
    """
    Assigns the hostnme the account_id to sync
    When supplied with the previous sync host details, it will atomically
    transfer the account from the old host, to the new host
    Intended primarily for use when testing peformance of a specific
    sync host with certain account
    """

    print "hello"
    zone = get_zone_for_instance(hostname)
    if previous_host_name is None:
        message = 'You have not provided a --previous-host-name option'\
                  'When previou-host-name in unspecified, this script only '\
                  'unassigns the desired account from the previous instance'\
                  'if the two sync instances are in the same zone.'\
                  'Proceed? [Y/n] '
        if raw_input(message).strip().lower() == 'n':
            print 'Will not proceed'
            return
        previous_zone = zone
    else:
        previous_zone = get_zone_for_instance(previous_host_name)
    qc = QueueClient(zone)

    host = '{}:{}'.format(hostname, process_num)
    qc.transfer_account(account_id, host, previous_zone)

if __name__ == '__main__':
    main()
