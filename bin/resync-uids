#!/usr/bin/env python
from gevent import monkey; monkey.patch_all()
from setproctitle import setproctitle; setproctitle('resync-uids')

import sys

import click

from sqlalchemy.orm.exc import NoResultFound

from inbox import crispin
from inbox.models import Account, Folder
from inbox.models.session import session_scope
from inbox.log import get_logger, configure_logging
log = get_logger()

from inbox.mailsync.backends.gmail import resync_uids as gmail_resync_uids


@click.command()
@click.argument('email_address')
@click.argument('folder_name')
@click.option('-y', '--yes', default=False, help="Actually run the operation.")
def resync_uids(email_address, folder_name, yes):
    """ Resync UIDs for a given folder for a Gmail account. """

    configure_logging(False)

    with session_scope() as db_session:
        try:
            account = db_session.query(Account).filter_by(
                email_address=email_address).one()
        except NoResultFound:
            sys.exit("No account found for email '{}'".format(email_address))
        if account.provider != 'gmail':
            sys.exit("resync-uids only supports Gmail right now")
        if account.sync_state not in ('stopped', 'killed'):
            sys.exit("Must stop account sync first!")
        try:
            folder = db_session.query(Folder).filter_by(
                account_id=account.id, name=folder_name).one()
        except NoResultFound:
            sys.exit("Account has no folder named '{}'".format(folder_name))
        account_id, folder_id = account.id, folder.id

    conn_pool = crispin.connection_pool(account_id, pool_size=1)
    if yes:
        gmail_resync_uids(conn_pool, log, account_id, folder_id, folder_name,
                          dry_run=False)
    else:
        gmail_resync_uids(conn_pool, log, account_id, folder_id, folder_name,
                          dry_run=True)


if __name__ == '__main__':
    resync_uids()
