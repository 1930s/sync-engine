#!/usr/bin/env python
from gevent import monkey; monkey.patch_all()
import argparse

from setproctitle import setproctitle; setproctitle('inbox-api')

from inbox.server.log import configure_general_logging, get_logger
configure_general_logging()
log = get_logger()


parser = argparse.ArgumentParser(description="REPL for crispin")
parser.add_argument('-p', '--port', dest='port', default=5555)
parser.add_argument('--prod', action='store_true', default=False,
                         help="Disables the autoreloader and potentially other"
                         " non-production features.")
args = parser.parse_args()

from inbox.api.srv import app
from gevent.wsgi import WSGIServer, WSGIHandler
from inbox.server.log import get_logger

# gevent.pywsgi bullshit. see
# http://stackoverflow.com/questions/9444405/gunicorn-and-websockets
def log_request(self, *args):
    log = self.server.log
    if log:
        if hasattr(log, "info"):
            log.info(self.format_request(*args))
        elif hasattr(log, "debug"):
            log.debug(self.format_request(*args))
        elif hasattr(log, "warning"):
            log.warning(self.format_request(*args))
        elif hasattr(log, "error"):
            log.error(self.format_request(*args))
        else:
            log.write(self.format_request(*args))
WSGIHandler.log_request = log_request

inbox_logger = get_logger(purpose='api')

def start():
    http_server = WSGIServer(('', int(args.port)), app, log=inbox_logger)
    inbox_logger.info("Starting API server on port {0}".format(args.port))
    http_server.serve_forever()


if not args.prod:
    from werkzeug.serving import run_with_reloader
    run_with_reloader(start)
else:
    start()

