#!/usr/bin/env python
import os
import sys
import click


from setproctitle import setproctitle; setproctitle('inbox-api')
from gevent import monkey; monkey.patch_all()
import gevent_openssl; gevent_openssl.monkey_patch()

from gevent.pywsgi import WSGIServer

from nylas.api.wsgi import NylasWSGIHandler

syncback = None
http_server = None


@click.command()
@click.option('--prod/--no-prod', default=False,
              help='Disables the autoreloader and potentially other '
                   'non-production features.')
@click.option('--start-syncback/--no-start-syncback', default=True,
              help='Also start the syncback service')
@click.option('-c', '--config', default=None,
              help='Path to JSON configuration file.')
@click.option('-p', '--port', default=5555, help='Port to run flask app on.')
def main(prod, start_syncback, config, port):
    """ Launch the Inbox API service. """

    if config is not None:
        from inbox.util.startup import load_overrides
        config_path = os.path.abspath(config)
        load_overrides(config_path)
    from inbox.config import config as inbox_config
    from nylas.logging import get_logger, configure_logging
    from inbox.util.startup import preflight, load_overrides

    configure_logging(log_level=inbox_config.get('LOGLEVEL'))

    if config is not None:
        config_path = os.path.abspath(config)
        load_overrides(config_path)

    # if prod:
    start(port, start_syncback)
    # else:
    #     # preflight()
    #     from werkzeug.serving import run_with_reloader
    #     run_with_reloader(lambda: start(port, start_syncback))


def start(port, start_syncback):
    # We need to import this down here, because this in turn imports
    # ignition.engine, which has to happen *after* we read any config overrides
    # for the database parameters. Boo for imports with side-effects.
    from inbox.api.srv import app
    from nylas.logging import get_logger

    if start_syncback:
        # start actions service
        from inbox.transactions.actions import SyncbackService
        syncback = SyncbackService(0, 1)
        syncback.start()

    nylas_logger = get_logger()

    http_server = WSGIServer(('', int(port)), app, log=nylas_logger,
                             handler_class=NylasWSGIHandler)
    nylas_logger.info('Starting API server', port=port)
    http_server.serve_forever()

    if start_syncback:
        syncback.join()

if __name__ == '__main__':
    main()
