daemon off;
#######################################################################
#
# This is the main Nginx configuration file.
#
# More information about the configuration options is available on
#   * the English wiki - http://wiki.nginx.org/Main
#   * the Russian documentation - http://sysoev.ru/nginx/
#
#######################################################################

#----------------------------------------------------------------------
# Main Module - directives that cover basic functionality
#
#   http://wiki.nginx.org/NginxHttpMainModule
#
#----------------------------------------------------------------------

# user              ec2-user;
worker_processes  1;

# error_log  /var/log/nginx/error.log;

#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /var/run/nginx.pid;


#----------------------------------------------------------------------
# Events Module
#
#   http://wiki.nginx.org/NginxHttpEventsModule
#
#----------------------------------------------------------------------

events {
    worker_connections  1024;
}

#----------------------------------------------------------------------
# HTTP Core Module
#
#   http://wiki.nginx.org/NginxHttpCoreModule
#
#----------------------------------------------------------------------

http {
    include    mime.types;
    default_type  application/octet-stream;
    gzip  on;

    client_max_body_size 300M;  # Also set in Flask app

    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  /var/log/nginx/access.log  main;

    keepalive_timeout  65;
    # The default server is in conf.d/default.conf
    # include /etc/nginx/conf.d/*.conf;


    # Always force SSL
    server {
        listen         80;
        return 301 https://$host$request_uri;
    }


    # Redirect apex domain to www
    # This doesn't deal well with having the domain be a generated ec2 dns
    # server {
    #     listen 443 ssl;
    #     ssl_certificate     certs/inboxapp-combined.crt;
    #     ssl_certificate_key certs/server.key;
    #     server_name inboxapp.com;
    #     return 301 $scheme://www.inboxapp.com$request_uri;
    # }


    # Single flask app
    upstream app_server
    {
        # Note: can't use 'localhost' unless we really support
        # both both ipv4 and ipv6.
        server 127.0.0.1:5000 fail_timeout=0;
    }


    server
    {
        listen 443 ssl;
        ssl_certificate     /etc/ssl/certs/inboxapp-combined.crt;
        ssl_certificate_key /etc/ssl/private/server.key;
        server_name *.inboxapp.com;

        location /favicon.ico { alias web_client/favicon.ico; }

        # Static files
        location /app
        {
            if ($uri = /app) { return 301 /app/; }  # Need trailing slash for relative paths
            autoindex off;
            alias web_client;
            sendfile    on;
            try_files $uri $uri/index.html =404;
        }

    # other statics
    location /static
    {
            if ($uri = /app) { return 301 /app/; }  # Need trailing slash for relative paths
            autoindex off;
            alias web_client;
            sendfile    on;
            try_files $uri $uri/index.html =404;
    }

        # Websocket upgrade. We run this on port 80 as well since
        # some users may be behind a firewall
        location /wire
        {
            proxy_pass http://app_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }

        # Redirect everything else to Flask app
        location /
        {
            proxy_pass   http://app_server;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_intercept_errors on;
        }


        # Error pages
        error_page 404 @not_found_error;
        location @not_found_error {
            root web_client; # location of 500.html file
            internal;
            rewrite ^ /404.html;
            break;
        }
        error_page 500 501 502 503 504 @internal_error;
        location @internal_error {
            root web_client; # location of 500.html file
            internal;
            rewrite ^ /50x.html;
            break;
        }

    }
}
