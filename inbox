#!/usr/bin/env python
from gevent import monkey; monkey.patch_all()
import argparse
import signal
import sys
import os
from config import setup_env

from server.util.log import configure_logging
log = configure_logging()



def debug(args=None):
    """ Run the server with autoreload. TODO add debug flag to startup."""
    from werkzeug.serving import run_with_reloader
    run_with_reloader(start)


def start(args=None):
    # commit = subprocess.check_output(["git", "describe", "--tags"])
    print """
\033[94m     Welcome to... \033[0m\033[1;95m
      _____       _
     |_   _|     | |
       | |  _ __ | |__   _____  __
       | | | '_ \| '_ \ / _ \ \/ /
      _| |_| | | | |_) | (_) >  <
     |_____|_| |_|_.__/ \___/_/\_\\  \033[0m

     Use CTRL-C to stop.
     """
    setup_env()

    # Start ZeroRPC api server service
    from server.util.concurrency import make_zerorpc
    from server.api import API

    api_srv_loc = os.environ.get('API_SERVER_LOC', None)
    make_zerorpc(API, api_srv_loc)

    # Start ZeroRPC sync server service
    from server.sync import SyncService
    sync_srv_loc = os.environ.get('CRISPIN_SERVER_LOC', None)
    make_zerorpc(SyncService, sync_srv_loc)

    # Start nginx like this. Restart with `-s reload` flags.
    # sudo nginx -c nginx.conf -p ./

    # Start web server
    from server.app import startserver
    try:
        startserver('127.0.0.1', 5000)
    except Exception, e:
        raise e
        stop(None)

def sync(args):
    setup_env()
    from server.sync import initial_sync
    initial_sync(args.email_address)



def stop(args):
    print """
\033[91m     Cleaning up...
\033[0m"""
    # from server.app import stopserver
    # stopserver()

    print """
\033[91m     Stopped.
\033[0m"""
    # os.system("stty echo")
    sys.exit(0)



def console(args):

    # import models
    # env = {'db': models.db_session}

    # # Based on http://docs.python.org/2/tutorial/interactive.html
    # # except it's 2013 and we have closures.
    # import atexit
    # import readline
    # import rlcompleter
    # history_path = os.path.expanduser('~/.pyhistory.inbox')
    # if os.path.exists(history_path):
    #     readline.read_history_file(history_path)
    # atexit.register(lambda: readline.write_history_file(history_path))

    # import code
    # code.interact(local=env,
    #               banner='Python %s on %s\nInbox console'
    #                      % (sys.version.replace('\n', ' '), sys.platform))

    assert args.email_address, "Need email address to sync"
    setup_env()

    from tools.crispinshell import start_console
    start_console(args.email_address)


def signal_handler(signal, frame):
    stop(None)


def main():
    signal.signal(signal.SIGINT, signal_handler)

    parser = argparse.ArgumentParser(description="Inbox App")
    subparsers = parser.add_subparsers()

    parser_start = subparsers.add_parser('start')
    parser_start.set_defaults(func=start)

    parser_start = subparsers.add_parser('debug')
    parser_start.set_defaults(func=debug)

    parser_stop = subparsers.add_parser('stop')
    parser_stop.set_defaults(func=stop)

    parser_console = subparsers.add_parser('console', description="REPL for crispin")
    parser_console.add_argument('--email_address', help='Email address of user to sync', required=True)
    parser_console.set_defaults(func=console)

    parser_sync = subparsers.add_parser('sync', description="Download initial mail metadata and parts.")
    parser_sync.add_argument('--email_address', help='Email address of user to sync', required=True)
    parser_sync.set_defaults(func=sync)

    args = parser.parse_args()
    args.func(args)


if __name__=="__main__":
    main()
